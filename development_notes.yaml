# 開発ノートとベストプラクティス

## テスト (Jest)

### コンポーネントのモック (`jest.setup.ts`):
- **分離:** `react-native` と他のライブラリ (例: `react-native-paper`) のモックは、競合を避けるために別々の `jest.mock()` 呼び出しで行う。
- **モック実装の詳細:**
    - テストが要求する構造に注意する。例えば、`MockButton` は children を `<Text>` でラップする必要があった。
    - インタラクティブなコンポーネント (例: `TextInput`) のモックは、動作を正しくシミュレートするために内部状態 (`React.useState`) が必要になる場合がある (`MockTextInputComponent`)。
- **依存関係:** モックコンポーネントが、テスト対象コンポーネントから渡されるプロパティ (例: `onChangeText`, `value`) を正しく処理することを確認する。

## リンティング (ESLint)

### `@typescript-eslint/no-explicit-any` の扱い:
- **必要性:** 複雑なモックや型相互作用においては、`any` の使用が避けられない場合がある。
- **ルールの無効化:** ESLint の無効化コメント (`// eslint-disable-next-line`, `/* eslint-disable-next-line */`, `// eslint-disable-line`) は、限定的かつ正確に使用する。
- **エラー箇所:** ESLint のエラー行/列番号は誤解を招く可能性があることに注意する。エラーは、単純な型注釈だけでなく、インデックスシグネチャ (`[key: string]: any`) や `any` の間接的な使用箇所を指している可能性がある。エラーを引き起こしている正確な箇所を確認する。

## 一般的なワークフロー

- **両方を確認:** 変更を加えた後は、コードをコミットまたはプッシュする前に、**必ず** テスト (`npm test`) とリント (`npm run lint`) の両方を実行し、すべてがパスすることを確認する。これは、設定ファイル (`jest.setup.ts`, `jest.config.js`, `.eslintrc.js` など) を変更する場合に特に重要である。
